name: Full CI Pipeline

on:
  push:
    branches: [main]

permissions:
  contents: read
  security-events: write

jobs:
  lint:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: react-app
    steps:
      - uses: actions/checkout@v3
      - name: Load Node environment
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use node
      - name: Install dependencies
        run: npm install
      - name: Run ESLint
        run: npx eslint src/**/*.js

  sca:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: react-app
    steps:
      - uses: actions/checkout@v3
      - name: Load Node environment
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use node
      - name: Install dependencies
        run: npm install
      - name: Run SCA with npm audit
        run: npm audit --audit-level=moderate || true

  sast:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: react-app
    steps:
      - uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  test:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: react-app
    steps:
      - uses: actions/checkout@v3
      - name: Load Node environment
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use node
      - name: Install dependencies
        run: npm install
      - name: Run unit tests
        run: npm test || echo "No tests found, skipping."

  build-and-push:
    needs: [lint, sca, sast, test]
    runs-on: self-hosted
    defaults:
      run:
        working-directory: react-app
    steps:
      - uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build Docker image
        run: docker build -t ${{ secrets.REGISTRY_USERNAME }}/react-app:latest .
      - name: Push Docker image
        run: docker push ${{ secrets.REGISTRY_USERNAME }}/react-app:latest
